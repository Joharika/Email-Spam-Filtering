# -*- coding: utf-8 -*-
"""Email Spam Filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qUGeWNrz1h3LAOx69UHAbnHrullpvhV8
"""

!pip install pandas scikit-learn nltk

import pandas as pd
# Load the dataset
data = pd.read_csv('/content/spam.csv', encoding='latin-1')
# Let's only keep the relevant columns
data = data[['v1', 'v2']]
data.columns = ['label', 'message']

import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
# Download NLTK resources if not done already
import nltk
nltk.download('punkt')
nltk.download('stopwords')
# Text preprocessing
stop_words = set(stopwords.words('english'))
def preprocess_text(text):
    text = re.sub('[^a-zA-Z]', ' ', text)
    text = text.lower()
    words = word_tokenize(text)
    words = [word for word in words if word not in stop_words]
    return ' '.join(words)
data['message'] = data['message'].apply(preprocess_text)

tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # You can adjust max_features
X = tfidf_vectorizer.fit_transform(data['message']).toarray()

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score

# Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, data['label'], test_size=0.2, random_state=42)

# Training the Naive Bayes model
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train, y_train)

# Predictions
y_pred = nb_classifier.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

new_email = "Hey, congratulations! You've won a free gift card. Click here to claim."
preprocessed_new_email = preprocess_text(new_email)
new_email_tfidf = tfidf_vectorizer.transform([preprocessed_new_email]).toarray()

prediction = nb_classifier.predict(new_email_tfidf)
print("Predicted Label:", prediction[0])